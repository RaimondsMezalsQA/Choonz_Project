/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1571.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 2.0], [56.0, 2.0], [56.1, 2.0], [56.2, 2.0], [56.3, 2.0], [56.4, 2.0], [56.5, 2.0], [56.6, 2.0], [56.7, 2.0], [56.8, 2.0], [56.9, 2.0], [57.0, 2.0], [57.1, 2.0], [57.2, 2.0], [57.3, 2.0], [57.4, 2.0], [57.5, 2.0], [57.6, 2.0], [57.7, 2.0], [57.8, 2.0], [57.9, 2.0], [58.0, 2.0], [58.1, 2.0], [58.2, 2.0], [58.3, 2.0], [58.4, 2.0], [58.5, 2.0], [58.6, 2.0], [58.7, 2.0], [58.8, 2.0], [58.9, 2.0], [59.0, 2.0], [59.1, 2.0], [59.2, 2.0], [59.3, 2.0], [59.4, 2.0], [59.5, 2.0], [59.6, 2.0], [59.7, 2.0], [59.8, 2.0], [59.9, 2.0], [60.0, 2.0], [60.1, 2.0], [60.2, 2.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 2.0], [67.2, 2.0], [67.3, 2.0], [67.4, 2.0], [67.5, 2.0], [67.6, 2.0], [67.7, 2.0], [67.8, 2.0], [67.9, 2.0], [68.0, 2.0], [68.1, 2.0], [68.2, 2.0], [68.3, 2.0], [68.4, 2.0], [68.5, 2.0], [68.6, 2.0], [68.7, 2.0], [68.8, 2.0], [68.9, 2.0], [69.0, 2.0], [69.1, 2.0], [69.2, 2.0], [69.3, 2.0], [69.4, 2.0], [69.5, 2.0], [69.6, 2.0], [69.7, 2.0], [69.8, 2.0], [69.9, 2.0], [70.0, 2.0], [70.1, 2.0], [70.2, 2.0], [70.3, 2.0], [70.4, 2.0], [70.5, 2.0], [70.6, 2.0], [70.7, 2.0], [70.8, 2.0], [70.9, 2.0], [71.0, 2.0], [71.1, 2.0], [71.2, 2.0], [71.3, 2.0], [71.4, 2.0], [71.5, 2.0], [71.6, 2.0], [71.7, 2.0], [71.8, 2.0], [71.9, 2.0], [72.0, 2.0], [72.1, 2.0], [72.2, 2.0], [72.3, 2.0], [72.4, 2.0], [72.5, 2.0], [72.6, 2.0], [72.7, 2.0], [72.8, 2.0], [72.9, 2.0], [73.0, 2.0], [73.1, 2.0], [73.2, 2.0], [73.3, 2.0], [73.4, 2.0], [73.5, 2.0], [73.6, 2.0], [73.7, 2.0], [73.8, 2.0], [73.9, 2.0], [74.0, 2.0], [74.1, 2.0], [74.2, 2.0], [74.3, 2.0], [74.4, 2.0], [74.5, 2.0], [74.6, 2.0], [74.7, 2.0], [74.8, 2.0], [74.9, 2.0], [75.0, 2.0], [75.1, 2.0], [75.2, 2.0], [75.3, 2.0], [75.4, 2.0], [75.5, 2.0], [75.6, 2.0], [75.7, 2.0], [75.8, 2.0], [75.9, 2.0], [76.0, 3.0], [76.1, 3.0], [76.2, 3.0], [76.3, 3.0], [76.4, 3.0], [76.5, 3.0], [76.6, 3.0], [76.7, 3.0], [76.8, 3.0], [76.9, 3.0], [77.0, 3.0], [77.1, 3.0], [77.2, 3.0], [77.3, 3.0], [77.4, 3.0], [77.5, 3.0], [77.6, 3.0], [77.7, 3.0], [77.8, 3.0], [77.9, 3.0], [78.0, 3.0], [78.1, 3.0], [78.2, 3.0], [78.3, 3.0], [78.4, 3.0], [78.5, 3.0], [78.6, 3.0], [78.7, 3.0], [78.8, 3.0], [78.9, 3.0], [79.0, 3.0], [79.1, 3.0], [79.2, 3.0], [79.3, 3.0], [79.4, 3.0], [79.5, 3.0], [79.6, 3.0], [79.7, 3.0], [79.8, 3.0], [79.9, 3.0], [80.0, 3.0], [80.1, 4.0], [80.2, 4.0], [80.3, 4.0], [80.4, 4.0], [80.5, 4.0], [80.6, 4.0], [80.7, 4.0], [80.8, 4.0], [80.9, 4.0], [81.0, 4.0], [81.1, 4.0], [81.2, 4.0], [81.3, 5.0], [81.4, 5.0], [81.5, 5.0], [81.6, 5.0], [81.7, 5.0], [81.8, 6.0], [81.9, 6.0], [82.0, 7.0], [82.1, 7.0], [82.2, 8.0], [82.3, 9.0], [82.4, 11.0], [82.5, 14.0], [82.6, 17.0], [82.7, 34.0], [82.8, 75.0], [82.9, 82.0], [83.0, 103.0], [83.1, 214.0], [83.2, 273.0], [83.3, 279.0], [83.4, 286.0], [83.5, 326.0], [83.6, 344.0], [83.7, 378.0], [83.8, 403.0], [83.9, 416.0], [84.0, 520.0], [84.1, 523.0], [84.2, 526.0], [84.3, 535.0], [84.4, 558.0], [84.5, 579.0], [84.6, 595.0], [84.7, 600.0], [84.8, 603.0], [84.9, 605.0], [85.0, 607.0], [85.1, 609.0], [85.2, 611.0], [85.3, 613.0], [85.4, 615.0], [85.5, 616.0], [85.6, 617.0], [85.7, 618.0], [85.8, 619.0], [85.9, 621.0], [86.0, 622.0], [86.1, 624.0], [86.2, 626.0], [86.3, 627.0], [86.4, 629.0], [86.5, 630.0], [86.6, 631.0], [86.7, 632.0], [86.8, 633.0], [86.9, 635.0], [87.0, 637.0], [87.1, 638.0], [87.2, 639.0], [87.3, 641.0], [87.4, 642.0], [87.5, 645.0], [87.6, 647.0], [87.7, 651.0], [87.8, 653.0], [87.9, 657.0], [88.0, 661.0], [88.1, 664.0], [88.2, 668.0], [88.3, 670.0], [88.4, 670.0], [88.5, 671.0], [88.6, 674.0], [88.7, 679.0], [88.8, 685.0], [88.9, 687.0], [89.0, 690.0], [89.1, 692.0], [89.2, 694.0], [89.3, 695.0], [89.4, 696.0], [89.5, 697.0], [89.6, 699.0], [89.7, 701.0], [89.8, 702.0], [89.9, 705.0], [90.0, 706.0], [90.1, 708.0], [90.2, 710.0], [90.3, 714.0], [90.4, 718.0], [90.5, 720.0], [90.6, 721.0], [90.7, 724.0], [90.8, 726.0], [90.9, 729.0], [91.0, 736.0], [91.1, 738.0], [91.2, 741.0], [91.3, 744.0], [91.4, 747.0], [91.5, 752.0], [91.6, 754.0], [91.7, 763.0], [91.8, 767.0], [91.9, 771.0], [92.0, 775.0], [92.1, 777.0], [92.2, 780.0], [92.3, 782.0], [92.4, 785.0], [92.5, 786.0], [92.6, 793.0], [92.7, 797.0], [92.8, 799.0], [92.9, 803.0], [93.0, 811.0], [93.1, 829.0], [93.2, 836.0], [93.3, 841.0], [93.4, 843.0], [93.5, 848.0], [93.6, 868.0], [93.7, 881.0], [93.8, 888.0], [93.9, 893.0], [94.0, 898.0], [94.1, 902.0], [94.2, 904.0], [94.3, 907.0], [94.4, 911.0], [94.5, 913.0], [94.6, 917.0], [94.7, 922.0], [94.8, 924.0], [94.9, 926.0], [95.0, 929.0], [95.1, 934.0], [95.2, 939.0], [95.3, 943.0], [95.4, 954.0], [95.5, 960.0], [95.6, 975.0], [95.7, 982.0], [95.8, 990.0], [95.9, 994.0], [96.0, 996.0], [96.1, 1001.0], [96.2, 1004.0], [96.3, 1006.0], [96.4, 1007.0], [96.5, 1012.0], [96.6, 1016.0], [96.7, 1020.0], [96.8, 1024.0], [96.9, 1030.0], [97.0, 1040.0], [97.1, 1046.0], [97.2, 1060.0], [97.3, 1080.0], [97.4, 1090.0], [97.5, 1098.0], [97.6, 1102.0], [97.7, 1105.0], [97.8, 1110.0], [97.9, 1112.0], [98.0, 1116.0], [98.1, 1119.0], [98.2, 1122.0], [98.3, 1124.0], [98.4, 1135.0], [98.5, 1144.0], [98.6, 1151.0], [98.7, 1156.0], [98.8, 1158.0], [98.9, 1164.0], [99.0, 1166.0], [99.1, 1173.0], [99.2, 1182.0], [99.3, 1191.0], [99.4, 1198.0], [99.5, 1203.0], [99.6, 1208.0], [99.7, 1212.0], [99.8, 1217.0], [99.9, 1225.0], [100.0, 1247.0]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 2.0], [56.0, 2.0], [56.1, 2.0], [56.2, 2.0], [56.3, 2.0], [56.4, 2.0], [56.5, 2.0], [56.6, 2.0], [56.7, 2.0], [56.8, 2.0], [56.9, 2.0], [57.0, 2.0], [57.1, 2.0], [57.2, 2.0], [57.3, 2.0], [57.4, 2.0], [57.5, 2.0], [57.6, 2.0], [57.7, 2.0], [57.8, 2.0], [57.9, 2.0], [58.0, 2.0], [58.1, 2.0], [58.2, 2.0], [58.3, 2.0], [58.4, 2.0], [58.5, 2.0], [58.6, 2.0], [58.7, 2.0], [58.8, 2.0], [58.9, 2.0], [59.0, 2.0], [59.1, 2.0], [59.2, 2.0], [59.3, 2.0], [59.4, 2.0], [59.5, 2.0], [59.6, 2.0], [59.7, 2.0], [59.8, 2.0], [59.9, 2.0], [60.0, 2.0], [60.1, 2.0], [60.2, 2.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 2.0], [67.2, 2.0], [67.3, 2.0], [67.4, 2.0], [67.5, 2.0], [67.6, 2.0], [67.7, 2.0], [67.8, 2.0], [67.9, 2.0], [68.0, 2.0], [68.1, 3.0], [68.2, 3.0], [68.3, 3.0], [68.4, 3.0], [68.5, 3.0], [68.6, 3.0], [68.7, 3.0], [68.8, 3.0], [68.9, 3.0], [69.0, 3.0], [69.1, 3.0], [69.2, 3.0], [69.3, 3.0], [69.4, 3.0], [69.5, 3.0], [69.6, 3.0], [69.7, 3.0], [69.8, 3.0], [69.9, 3.0], [70.0, 3.0], [70.1, 3.0], [70.2, 3.0], [70.3, 3.0], [70.4, 3.0], [70.5, 3.0], [70.6, 3.0], [70.7, 3.0], [70.8, 3.0], [70.9, 3.0], [71.0, 3.0], [71.1, 3.0], [71.2, 3.0], [71.3, 3.0], [71.4, 3.0], [71.5, 3.0], [71.6, 3.0], [71.7, 3.0], [71.8, 3.0], [71.9, 3.0], [72.0, 3.0], [72.1, 3.0], [72.2, 3.0], [72.3, 3.0], [72.4, 3.0], [72.5, 3.0], [72.6, 3.0], [72.7, 3.0], [72.8, 3.0], [72.9, 3.0], [73.0, 3.0], [73.1, 3.0], [73.2, 3.0], [73.3, 3.0], [73.4, 3.0], [73.5, 3.0], [73.6, 3.0], [73.7, 3.0], [73.8, 3.0], [73.9, 3.0], [74.0, 3.0], [74.1, 3.0], [74.2, 3.0], [74.3, 3.0], [74.4, 3.0], [74.5, 3.0], [74.6, 3.0], [74.7, 3.0], [74.8, 3.0], [74.9, 3.0], [75.0, 3.0], [75.1, 3.0], [75.2, 3.0], [75.3, 3.0], [75.4, 3.0], [75.5, 3.0], [75.6, 3.0], [75.7, 3.0], [75.8, 3.0], [75.9, 3.0], [76.0, 3.0], [76.1, 3.0], [76.2, 3.0], [76.3, 3.0], [76.4, 3.0], [76.5, 3.0], [76.6, 3.0], [76.7, 3.0], [76.8, 3.0], [76.9, 3.0], [77.0, 3.0], [77.1, 3.0], [77.2, 3.0], [77.3, 3.0], [77.4, 3.0], [77.5, 3.0], [77.6, 3.0], [77.7, 3.0], [77.8, 3.0], [77.9, 3.0], [78.0, 4.0], [78.1, 4.0], [78.2, 4.0], [78.3, 4.0], [78.4, 4.0], [78.5, 4.0], [78.6, 4.0], [78.7, 4.0], [78.8, 4.0], [78.9, 4.0], [79.0, 4.0], [79.1, 4.0], [79.2, 4.0], [79.3, 4.0], [79.4, 4.0], [79.5, 4.0], [79.6, 4.0], [79.7, 4.0], [79.8, 4.0], [79.9, 4.0], [80.0, 4.0], [80.1, 4.0], [80.2, 4.0], [80.3, 4.0], [80.4, 4.0], [80.5, 5.0], [80.6, 5.0], [80.7, 5.0], [80.8, 5.0], [80.9, 5.0], [81.0, 5.0], [81.1, 5.0], [81.2, 5.0], [81.3, 6.0], [81.4, 6.0], [81.5, 6.0], [81.6, 6.0], [81.7, 6.0], [81.8, 7.0], [81.9, 7.0], [82.0, 8.0], [82.1, 9.0], [82.2, 9.0], [82.3, 11.0], [82.4, 14.0], [82.5, 16.0], [82.6, 18.0], [82.7, 33.0], [82.8, 77.0], [82.9, 82.0], [83.0, 103.0], [83.1, 214.0], [83.2, 274.0], [83.3, 280.0], [83.4, 287.0], [83.5, 326.0], [83.6, 344.0], [83.7, 379.0], [83.8, 404.0], [83.9, 520.0], [84.0, 549.0], [84.1, 618.0], [84.2, 627.0], [84.3, 639.0], [84.4, 651.0], [84.5, 660.0], [84.6, 665.0], [84.7, 695.0], [84.8, 714.0], [84.9, 723.0], [85.0, 759.0], [85.1, 780.0], [85.2, 794.0], [85.3, 802.0], [85.4, 848.0], [85.5, 876.0], [85.6, 898.0], [85.7, 926.0], [85.8, 936.0], [85.9, 940.0], [86.0, 950.0], [86.1, 962.0], [86.2, 977.0], [86.3, 982.0], [86.4, 988.0], [86.5, 992.0], [86.6, 996.0], [86.7, 999.0], [86.8, 1004.0], [86.9, 1010.0], [87.0, 1014.0], [87.1, 1018.0], [87.2, 1020.0], [87.3, 1023.0], [87.4, 1031.0], [87.5, 1034.0], [87.6, 1040.0], [87.7, 1044.0], [87.8, 1050.0], [87.9, 1057.0], [88.0, 1066.0], [88.1, 1070.0], [88.2, 1077.0], [88.3, 1085.0], [88.4, 1093.0], [88.5, 1099.0], [88.6, 1103.0], [88.7, 1106.0], [88.8, 1110.0], [88.9, 1113.0], [89.0, 1115.0], [89.1, 1117.0], [89.2, 1119.0], [89.3, 1121.0], [89.4, 1123.0], [89.5, 1124.0], [89.6, 1127.0], [89.7, 1131.0], [89.8, 1133.0], [89.9, 1137.0], [90.0, 1140.0], [90.1, 1141.0], [90.2, 1143.0], [90.3, 1148.0], [90.4, 1152.0], [90.5, 1156.0], [90.6, 1160.0], [90.7, 1165.0], [90.8, 1168.0], [90.9, 1175.0], [91.0, 1179.0], [91.1, 1185.0], [91.2, 1191.0], [91.3, 1196.0], [91.4, 1199.0], [91.5, 1203.0], [91.6, 1206.0], [91.7, 1209.0], [91.8, 1212.0], [91.9, 1214.0], [92.0, 1216.0], [92.1, 1219.0], [92.2, 1222.0], [92.3, 1225.0], [92.4, 1228.0], [92.5, 1232.0], [92.6, 1235.0], [92.7, 1241.0], [92.8, 1246.0], [92.9, 1251.0], [93.0, 1256.0], [93.1, 1262.0], [93.2, 1268.0], [93.3, 1276.0], [93.4, 1280.0], [93.5, 1283.0], [93.6, 1285.0], [93.7, 1288.0], [93.8, 1292.0], [93.9, 1295.0], [94.0, 1299.0], [94.1, 1301.0], [94.2, 1303.0], [94.3, 1305.0], [94.4, 1308.0], [94.5, 1310.0], [94.6, 1312.0], [94.7, 1316.0], [94.8, 1319.0], [94.9, 1325.0], [95.0, 1333.0], [95.1, 1340.0], [95.2, 1347.0], [95.3, 1351.0], [95.4, 1359.0], [95.5, 1362.0], [95.6, 1367.0], [95.7, 1372.0], [95.8, 1375.0], [95.9, 1377.0], [96.0, 1381.0], [96.1, 1385.0], [96.2, 1388.0], [96.3, 1393.0], [96.4, 1396.0], [96.5, 1403.0], [96.6, 1408.0], [96.7, 1409.0], [96.8, 1414.0], [96.9, 1417.0], [97.0, 1421.0], [97.1, 1423.0], [97.2, 1429.0], [97.3, 1432.0], [97.4, 1437.0], [97.5, 1441.0], [97.6, 1445.0], [97.7, 1447.0], [97.8, 1451.0], [97.9, 1454.0], [98.0, 1457.0], [98.1, 1460.0], [98.2, 1463.0], [98.3, 1465.0], [98.4, 1471.0], [98.5, 1477.0], [98.6, 1484.0], [98.7, 1492.0], [98.8, 1502.0], [98.9, 1512.0], [99.0, 1517.0], [99.1, 1521.0], [99.2, 1524.0], [99.3, 1527.0], [99.4, 1535.0], [99.5, 1537.0], [99.6, 1547.0], [99.7, 1556.0], [99.8, 1560.0], [99.9, 1566.0], [100.0, 1571.0]], "isOverall": false, "label": "User Controller", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 8298.0, "series": [{"data": [[0.0, 8298.0], [600.0, 496.0], [700.0, 320.0], [800.0, 120.0], [200.0, 38.0], [900.0, 205.0], [1000.0, 146.0], [1100.0, 191.0], [300.0, 32.0], [1200.0, 57.0], [400.0, 14.0], [100.0, 11.0], [500.0, 72.0]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[0.0, 8297.0], [600.0, 68.0], [700.0, 52.0], [800.0, 35.0], [200.0, 38.0], [900.0, 113.0], [1000.0, 178.0], [1100.0, 290.0], [1200.0, 259.0], [300.0, 32.0], [1300.0, 247.0], [1400.0, 230.0], [1500.0, 123.0], [400.0, 9.0], [100.0, 12.0], [500.0, 17.0]], "isOverall": false, "label": "User Controller", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16781.0, "series": [{"data": [[0.0, 16781.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3097.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 122.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 257.53540000000004, "minX": 1.616115E12, "maxY": 257.53540000000004, "series": [{"data": [[1.616115E12, 257.53540000000004]], "isOverall": false, "label": "Stress Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616115E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.0, "maxY": 1568.0, "series": [{"data": [[2.0, 1.8496732026143792], [3.0, 1.535041841004183], [4.0, 1.4984281223206641], [5.0, 1.669565217391302], [6.0, 1.71953578336557], [7.0, 1.625], [8.0, 2.216494845360825], [9.0, 1.666666666666667], [10.0, 2.1111111111111107], [11.0, 1.0833333333333333], [12.0, 1.8], [14.0, 6.8], [30.0, 2.0], [73.0, 3.0], [91.0, 6.0], [147.0, 3.0], [289.0, 2.0], [1652.0, 4.0], [1628.0, 663.0], [1659.0, 4.0], [1660.0, 805.0], [1658.0, 3.6666666666666665], [1642.0, 623.0909090909091], [1643.0, 722.0000000000001], [1632.0, 626.0869565217391], [1635.0, 622.3333333333334], [1638.0, 657.0], [1641.0, 677.7142857142858], [1640.0, 682.0], [1663.0, 744.0], [1625.0, 4.0], [1629.0, 665.75], [1631.0, 664.6666666666666], [1657.0, 727.0], [1655.0, 734.3333333333333], [1653.0, 726.1666666666667], [1675.0, 498.6666666666667], [1692.0, 772.0862068965521], [1690.0, 742.1415094339628], [1714.0, 597.7391304347825], [1696.0, 634.0], [1720.0, 562.5], [1718.0, 612.6923076923077], [1716.0, 229.53846153846155], [1715.0, 513.5555555555555], [1719.0, 715.0], [1697.0, 635.0], [1709.0, 683.1462264150947], [1707.0, 899.0], [1708.0, 1009.0], [1710.0, 656.8749999999999], [1711.0, 649.6296296296297], [1698.0, 763.3333333333334], [1699.0, 848.5652173913044], [1704.0, 853.4230769230769], [1703.0, 896.0], [1702.0, 938.75], [1706.0, 912.4615384615383], [1679.0, 787.6], [1712.0, 659.2705882352941], [1713.0, 718.0], [1677.0, 769.5], [1672.0, 384.0], [1673.0, 751.0], [1695.0, 774.0], [1667.0, 736.0], [1668.0, 736.0], [1665.0, 734.0], [1669.0, 757.1627906976745], [1684.0, 631.8571428571429], [1683.0, 663.2222222222223], [1682.0, 666.6666666666666], [1686.0, 579.0], [1685.0, 681.1818181818182], [1691.0, 831.0], [1693.0, 668.5185185185186], [1694.0, 688.9632352941178], [1688.0, 710.0], [1687.0, 564.0], [1778.0, 915.7000000000002], [1783.0, 1122.9], [1788.0, 1071.9600000000003], [1757.0, 749.1666666666667], [1730.0, 991.1111111111111], [1731.0, 926.0], [1733.0, 883.0], [1734.0, 1098.75], [1736.0, 951.8888888888889], [1735.0, 944.5], [1743.0, 787.4705882352941], [1742.0, 800.0], [1740.0, 910.5], [1741.0, 386.5], [1737.0, 900.0], [1752.0, 797.7962962962963], [1746.0, 545.1666666666666], [1745.0, 719.0], [1748.0, 169.25], [1747.0, 1166.0], [1750.0, 771.2413793103449], [1756.0, 638.5], [1777.0, 994.0], [1776.0, 175.83333333333334], [1790.0, 1060.8783783783779], [1775.0, 451.8], [1774.0, 7.333333333333333], [1770.0, 1203.0], [1768.0, 5.75], [1789.0, 1170.5], [1787.0, 975.7272727272725], [1786.0, 998.0], [1782.0, 1059.1249999999993], [1780.0, 556.5], [1779.0, 1105.0], [1781.0, 1114.9], [1841.0, 4.0], [1847.0, 7.0], [1854.0, 6.666666666666667], [1826.0, 3.0], [1824.0, 3.5], [1849.0, 3.6666666666666665], [1848.0, 6.5], [1810.0, 4.0], [1835.0, 37.0], [1838.0, 16.0], [1830.0, 3.0], [1834.0, 38.0], [1833.0, 3.0], [1828.0, 3.0], [1842.0, 4.909090909090909], [1820.0, 3.0], [1817.0, 10.0], [1818.0, 3.0], [1816.0, 10.0], [1814.0, 11.538461538461538], [1815.0, 3.0], [1821.0, 16.0], [1794.0, 7.0], [1792.0, 3.5], [1807.0, 4.5], [1804.0, 3.0], [1802.0, 3.5], [1800.0, 4.0], [1799.0, 4.0], [1798.0, 4.333333333333333], [1796.0, 3.0], [1823.0, 4.0], [1811.0, 3.0], [1846.0, 5.0], [1845.0, 5.0], [1843.0, 6.0], [1.0, 2.0]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[329.1437999999997, 137.66310000000058]], "isOverall": false, "label": "Create User (signup)-Aggregated", "isController": false}, {"data": [[2.0, 2.4109090909090924], [3.0, 1.86624605678233], [4.0, 1.8348056537102462], [5.0, 2.0288350634371333], [6.0, 2.1702838063439063], [7.0, 2.0377358490566024], [8.0, 2.7272727272727275], [9.0, 2.0153846153846144], [10.0, 2.3703703703703707], [11.0, 1.9], [12.0, 2.0], [14.0, 8.0], [29.0, 2.0], [30.0, 2.0], [34.0, 1146.0], [37.0, 1405.0], [40.0, 1100.0], [42.0, 1252.0], [44.0, 90.0], [47.0, 1341.0], [55.0, 81.0], [54.0, 379.0], [58.0, 1339.0], [66.0, 720.0], [65.0, 1221.6666666666665], [64.0, 731.6666666666667], [69.0, 5.0], [75.0, 1414.0], [73.0, 1297.5], [72.0, 580.25], [79.0, 1485.0], [78.0, 1464.0], [77.0, 315.0], [76.0, 1018.5], [82.0, 1254.6666666666667], [81.0, 1500.0], [87.0, 1035.0], [85.0, 992.3333333333334], [84.0, 1463.0], [91.0, 1108.6666666666667], [89.0, 392.5], [99.0, 1350.0], [98.0, 1298.5], [96.0, 707.5], [103.0, 1279.6666666666667], [101.0, 82.0], [100.0, 578.6666666666666], [106.0, 4.0], [105.0, 1104.5], [109.0, 1010.0], [114.0, 1436.0], [112.0, 1471.0], [119.0, 60.5], [123.0, 1438.0], [122.0, 351.0], [120.0, 1371.0], [135.0, 1042.5], [133.0, 403.0], [131.0, 962.0], [129.0, 706.3333333333334], [128.0, 1359.0], [142.0, 1453.0], [140.0, 386.66666666666663], [139.0, 1344.0], [136.0, 214.0], [150.0, 1395.0], [149.0, 1410.0], [147.0, 1175.3333333333333], [144.0, 3.0], [159.0, 285.0], [157.0, 1120.0], [153.0, 715.5], [167.0, 1433.0], [166.0, 1075.0], [165.0, 1418.0], [163.0, 1441.0], [161.0, 1443.0], [160.0, 1318.0], [175.0, 994.0], [173.0, 1124.0], [171.0, 1442.0], [181.0, 527.0], [180.0, 1459.0], [176.0, 780.0], [191.0, 918.6666666666666], [186.0, 1343.5], [197.0, 864.0], [195.0, 1547.0], [194.0, 1088.0], [192.0, 984.6], [206.0, 75.0], [205.0, 953.0], [202.0, 1000.5], [211.0, 1323.5], [209.0, 787.0], [208.0, 773.0], [223.0, 103.0], [219.0, 1404.0], [218.0, 1487.0], [217.0, 191.0], [231.0, 1060.0], [229.0, 1464.0], [228.0, 1118.0], [227.0, 545.0], [226.0, 501.0], [239.0, 316.25], [237.0, 1340.6], [236.0, 1358.0], [233.0, 92.0], [246.0, 781.0], [244.0, 568.2], [242.0, 5.0], [255.0, 939.0], [252.0, 1422.0], [251.0, 1295.0], [250.0, 186.0], [248.0, 1004.0], [270.0, 170.0], [268.0, 1477.0], [267.0, 1415.0], [266.0, 1053.0], [265.0, 1389.0], [261.0, 1004.5], [260.0, 1200.5], [259.0, 1322.0], [286.0, 1472.0], [287.0, 951.0], [285.0, 1240.0], [284.0, 1484.0], [283.0, 958.0], [282.0, 949.6666666666666], [280.0, 1229.3333333333333], [278.0, 1010.0], [275.0, 116.0], [291.0, 1385.0], [301.0, 142.0], [302.0, 582.6], [300.0, 1053.0], [298.0, 993.0], [296.0, 769.0], [295.0, 5.0], [293.0, 928.0], [290.0, 1443.0], [289.0, 3.0], [288.0, 1023.0], [312.0, 1077.0], [319.0, 1407.6666666666667], [315.0, 1370.0], [314.0, 1006.4285714285714], [313.0, 969.0], [311.0, 994.0], [309.0, 1333.0], [308.0, 931.5], [306.0, 1333.0], [305.0, 830.0], [334.0, 1426.6666666666667], [335.0, 1085.25], [333.0, 1405.0], [323.0, 1021.8], [329.0, 683.5], [328.0, 1457.6666666666667], [327.0, 439.0], [326.0, 1482.0], [325.0, 1404.5], [324.0, 1047.0], [339.0, 1004.0], [350.0, 997.0], [348.0, 1171.3333333333333], [347.0, 882.0], [346.0, 1137.3333333333333], [343.0, 984.0], [342.0, 654.6666666666666], [341.0, 1051.5], [338.0, 514.25], [337.0, 6.0], [355.0, 745.3333333333333], [365.0, 975.0], [367.0, 1307.25], [364.0, 751.5], [363.0, 1140.0], [362.0, 876.0], [358.0, 1082.0], [357.0, 1103.3333333333333], [354.0, 1228.5], [353.0, 18.0], [352.0, 1347.0], [371.0, 1127.0], [381.0, 1026.0], [383.0, 288.0], [380.0, 1224.5000000000002], [378.0, 1016.5], [377.0, 1412.0], [375.0, 1038.0], [374.0, 1018.0], [370.0, 34.0], [369.0, 999.0], [387.0, 981.3333333333334], [398.0, 1410.0], [397.0, 1107.0], [395.0, 1007.3333333333333], [394.0, 731.3333333333334], [392.0, 588.0], [391.0, 636.0], [389.0, 1484.0], [386.0, 847.8], [385.0, 1316.0], [384.0, 991.0], [403.0, 1411.0], [415.0, 1405.0], [413.0, 904.5], [411.0, 946.578947368421], [410.0, 1094.1666666666665], [409.0, 1465.0], [407.0, 97.0], [406.0, 657.3333333333333], [405.0, 938.2], [402.0, 1223.0], [401.0, 1195.0], [400.0, 1044.0], [431.0, 1540.0], [430.0, 79.0], [428.0, 1272.0], [426.0, 1180.3333333333333], [422.0, 1462.0], [421.0, 1394.0], [419.0, 1166.0], [416.0, 789.5], [446.0, 1093.6666666666667], [445.0, 1441.0], [442.0, 764.3333333333334], [439.0, 471.5], [437.0, 1007.6666666666666], [436.0, 636.0], [433.0, 940.0], [432.0, 1248.3333333333333], [461.0, 1138.0], [459.0, 1271.5], [458.0, 1243.0], [457.0, 1034.0], [455.0, 500.0], [454.0, 1510.0], [452.0, 385.0], [450.0, 1397.0], [448.0, 666.0], [467.0, 5.0], [478.0, 470.50000000000006], [475.0, 4.0], [473.0, 1009.0], [471.0, 1525.0], [470.0, 1405.0], [469.0, 1552.0], [466.0, 1443.5], [465.0, 1395.0], [464.0, 1488.0], [494.0, 8.0], [495.0, 5.0], [492.0, 732.0], [491.0, 1426.0], [487.0, 1111.3333333333333], [485.0, 6.0], [484.0, 744.0], [481.0, 6.0], [480.0, 6.0], [511.0, 1482.0], [510.0, 1529.0], [508.0, 1016.0], [504.0, 521.3333333333333], [500.0, 820.3333333333333], [499.0, 8.0], [497.0, 7.0], [536.0, 1425.0], [541.0, 4.0], [542.0, 717.0], [530.0, 1512.0], [528.0, 1439.0], [540.0, 1556.0], [539.0, 1445.0], [537.0, 1511.0], [526.0, 1434.6666666666667], [513.0, 1522.0], [516.0, 1288.0], [515.0, 1450.0], [518.0, 1411.3333333333333], [517.0, 1211.0], [525.0, 1491.5], [523.0, 1310.5], [522.0, 1454.0], [521.0, 1458.0], [520.0, 1437.0], [535.0, 1445.0], [534.0, 1461.0], [532.0, 1551.0], [531.0, 1412.5], [561.0, 1218.6666666666667], [572.0, 1559.0], [574.0, 1453.0], [560.0, 1444.0], [570.0, 1493.5], [569.0, 1520.0], [568.0, 1536.0], [547.0, 1382.0], [544.0, 1521.5], [559.0, 1400.0], [558.0, 1333.6666666666667], [557.0, 1484.5], [556.0, 1501.5], [552.0, 1554.0], [567.0, 1371.0], [566.0, 1281.0], [563.0, 1504.0], [606.0, 1460.5], [607.0, 1292.0], [594.0, 1243.0], [592.0, 1523.0], [597.0, 1243.5], [596.0, 1503.5], [605.0, 1550.0], [603.0, 1044.0], [602.0, 1419.0], [601.0, 1524.0], [600.0, 1456.0], [582.0, 419.33333333333337], [579.0, 723.0], [577.0, 1559.5], [576.0, 1427.0], [591.0, 1520.0], [588.0, 1448.0], [587.0, 1292.5], [586.0, 1465.0], [585.0, 1021.0], [584.0, 1523.0], [599.0, 1447.0], [598.0, 1568.0], [627.0, 1558.0], [639.0, 1466.0], [635.0, 1542.5], [633.0, 1498.0], [632.0, 1536.0], [622.0, 1499.0], [609.0, 1535.0], [613.0, 1476.0], [612.0, 1360.0], [615.0, 1517.0], [614.0, 1479.0], [621.0, 1462.5], [620.0, 1517.0], [618.0, 1524.0], [616.0, 1536.0], [631.0, 1457.0], [630.0, 1454.0], [628.0, 1284.0], [626.0, 1559.0], [624.0, 1515.0], [670.0, 1513.0], [671.0, 1213.0], [656.0, 4.0], [669.0, 1453.0], [668.0, 1454.0], [667.0, 1500.5], [665.0, 1502.75], [654.0, 1334.3333333333333], [642.0, 1448.0], [641.0, 1457.0], [646.0, 655.5], [644.0, 1491.25], [650.0, 1443.0], [649.0, 1483.3333333333333], [663.0, 1447.0], [662.0, 1435.0], [659.0, 1511.5], [657.0, 1034.0], [702.0, 1373.0], [692.0, 1512.0], [703.0, 1484.0], [688.0, 1514.0], [691.0, 1218.0], [690.0, 1231.0], [699.0, 1487.5], [698.0, 1527.0], [697.0, 1537.0], [678.0, 1418.0], [675.0, 1437.0], [673.0, 1314.0], [687.0, 1257.0], [686.0, 1422.0], [684.0, 942.6666666666666], [683.0, 1445.0], [680.0, 1254.6666666666667], [695.0, 1220.0], [694.0, 1517.0], [693.0, 1516.0], [734.0, 1474.0], [735.0, 1528.0], [722.0, 1248.0], [721.0, 1462.0], [733.0, 1408.0], [732.0, 1526.0], [731.0, 1423.0], [730.0, 731.5], [728.0, 1019.0], [710.0, 3.0], [709.0, 1567.0], [707.0, 1296.0], [705.0, 1438.5], [719.0, 1459.0], [717.0, 1332.5], [716.0, 1498.5], [715.0, 1470.0], [712.0, 1477.6666666666667], [726.0, 343.33333333333337], [724.0, 1437.0], [765.0, 1504.5], [767.0, 1454.0], [763.0, 1498.0], [761.0, 1385.0], [757.0, 1430.5], [756.0, 1385.0], [755.0, 1142.0], [753.0, 1538.0], [750.0, 1516.5], [736.0, 1178.5], [743.0, 1444.4], [740.0, 1455.5], [748.0, 1503.75], [746.0, 1478.0], [785.0, 789.0], [799.0, 1283.5], [797.0, 1215.0], [795.0, 912.0], [794.0, 1421.0], [781.0, 1116.0], [770.0, 1566.0], [768.0, 1431.5], [773.0, 1074.0], [772.0, 413.0], [780.0, 984.0], [779.0, 673.5], [777.0, 279.5], [776.0, 1101.0], [790.0, 782.0], [788.0, 1242.0], [787.0, 4.0], [784.0, 1133.3333333333333], [819.0, 846.0], [830.0, 1258.0], [829.0, 1295.3333333333333], [827.0, 766.0], [825.0, 1251.0], [814.0, 1225.0], [807.0, 1216.6666666666667], [803.0, 1117.5], [812.0, 1174.5], [810.0, 806.5], [809.0, 1279.0], [808.0, 707.0], [823.0, 1065.0], [822.0, 1279.0], [821.0, 1306.0], [818.0, 284.0], [816.0, 1004.0], [861.0, 759.0], [862.0, 1013.6666666666666], [858.0, 1075.75], [856.0, 1045.0], [855.0, 1103.0], [854.0, 1036.0], [851.0, 1162.0], [848.0, 1113.5], [846.0, 1107.0], [835.0, 1285.0], [834.0, 277.0], [837.0, 287.0], [836.0, 835.5], [839.0, 1291.0], [838.0, 1278.0], [844.0, 1017.0], [843.0, 1007.0], [842.0, 1133.0], [840.0, 5.0], [882.0, 1347.0], [894.0, 1342.0], [891.0, 1344.0], [890.0, 1227.0], [888.0, 1278.0], [879.0, 1258.0], [865.0, 1389.0], [869.0, 1215.0], [866.0, 1109.3333333333333], [871.0, 1258.5], [870.0, 1113.0], [876.0, 997.5], [874.0, 1014.5], [872.0, 942.0], [887.0, 1356.6666666666667], [884.0, 1310.0], [883.0, 1397.0], [881.0, 786.0], [880.0, 1230.0], [915.0, 270.3333333333333], [927.0, 926.0], [924.0, 877.5], [923.0, 1158.5], [922.0, 1068.0], [911.0, 959.0], [897.0, 1409.0], [896.0, 982.0], [902.0, 990.3333333333333], [900.0, 998.25], [910.0, 675.0], [907.0, 1316.0], [919.0, 641.5], [918.0, 1376.0], [916.0, 970.25], [913.0, 1064.0], [912.0, 640.5], [935.0, 1321.0], [957.0, 1388.0], [959.0, 269.5], [956.0, 1249.5], [954.0, 1331.5], [953.0, 1197.5], [934.0, 1097.0], [933.0, 1376.0], [932.0, 1104.0], [931.0, 1403.0], [930.0, 1409.0], [929.0, 1304.0], [928.0, 280.0], [942.0, 1295.0], [940.0, 1213.0], [939.0, 1305.0], [938.0, 988.0], [937.0, 1301.0], [936.0, 1379.0], [950.0, 1379.0], [948.0, 1202.6666666666667], [946.0, 1304.0], [944.0, 1151.6666666666667], [989.0, 1281.0], [990.0, 1285.0], [988.0, 908.25], [985.0, 1119.5], [984.0, 1219.0], [967.0, 1378.0], [965.0, 819.5], [963.0, 1130.6666666666667], [962.0, 1155.0], [983.0, 1120.5], [979.0, 1128.0], [976.0, 1082.3333333333333], [973.0, 1275.5], [971.0, 1307.5], [970.0, 1371.0], [968.0, 1310.0], [1017.0, 1310.0], [1020.0, 1394.0], [1023.0, 1360.0], [1018.0, 1226.0], [1015.0, 1348.5], [1011.0, 176.5], [1007.0, 1343.5], [994.0, 1300.0], [993.0, 1135.0], [999.0, 1294.0], [996.0, 1316.3333333333333], [1005.0, 1109.75], [1004.0, 1338.0], [1003.0, 283.0], [1000.0, 1363.0], [1072.0, 1338.0], [1074.0, 1046.0], [1064.0, 1069.5], [1078.0, 1387.0], [1038.0, 1313.0], [1036.0, 1266.0], [1034.0, 1174.5], [1032.0, 1125.3333333333333], [1028.0, 1266.0], [1026.0, 1374.0], [1024.0, 1020.0], [1054.0, 1313.0], [1052.0, 1057.5], [1046.0, 1193.0], [1042.0, 1338.0], [1070.0, 1033.0], [1068.0, 1194.75], [1122.0, 1280.0], [1150.0, 827.5], [1126.0, 1012.0], [1124.0, 1041.5], [1130.0, 1017.0], [1132.0, 327.0], [1148.0, 1306.0], [1144.0, 997.3333333333334], [1140.0, 1398.0], [1136.0, 1098.0], [1102.0, 909.5], [1098.0, 1060.0], [1096.0, 879.0], [1094.0, 1102.0], [1088.0, 1205.3333333333335], [1108.0, 750.0], [1106.0, 986.0], [1186.0, 344.5], [1188.0, 1277.0], [1210.0, 1262.0], [1190.0, 418.0], [1192.0, 637.0], [1196.0, 859.6666666666666], [1214.0, 331.0], [1202.0, 966.5], [1200.0, 621.0], [1166.0, 1259.0], [1160.0, 1312.0], [1154.0, 973.75], [1182.0, 1286.0], [1180.0, 445.0], [1178.0, 791.0], [1174.0, 326.0], [1170.0, 274.0], [1168.0, 1213.8], [1270.0, 898.3333333333334], [1278.0, 1206.2], [1276.0, 1352.0], [1274.0, 1325.0], [1266.0, 1359.0], [1246.0, 1364.0], [1220.0, 718.75], [1230.0, 627.5], [1244.0, 1260.0], [1240.0, 1290.0], [1238.0, 941.75], [1236.0, 1295.0], [1258.0, 891.3333333333334], [1340.0, 1329.0], [1338.0, 934.0], [1316.0, 1213.0], [1312.0, 1194.25], [1318.0, 953.0], [1320.0, 1232.0], [1322.0, 1008.0], [1326.0, 1284.0], [1324.0, 1039.0], [1342.0, 1195.0], [1336.0, 1059.6666666666667], [1332.0, 1028.0], [1328.0, 1050.5], [1290.0, 1309.75], [1284.0, 1282.5], [1282.0, 1298.0], [1308.0, 1122.5], [1304.0, 1332.0], [1302.0, 1354.0], [1296.0, 1256.5], [1398.0, 1185.0], [1402.0, 1290.0], [1382.0, 968.0], [1384.0, 1224.5], [1392.0, 1037.25], [1346.0, 1024.0], [1352.0, 964.5], [1354.0, 1215.0], [1358.0, 1050.0], [1372.0, 1252.0], [1370.0, 1177.5], [1364.0, 1127.5], [1360.0, 1047.6666666666667], [1390.0, 1255.0], [1442.0, 1126.0], [1470.0, 822.5], [1444.0, 1013.0], [1448.0, 1022.0], [1446.0, 1144.0], [1452.0, 974.0], [1450.0, 1139.75], [1464.0, 1183.3333333333333], [1462.0, 1189.0], [1460.0, 1143.0], [1456.0, 1162.0], [1438.0, 1170.2], [1408.0, 1151.0], [1410.0, 1184.0], [1414.0, 1160.75], [1418.0, 780.0], [1422.0, 1105.0], [1432.0, 6.0], [1428.0, 1124.0], [1426.0, 1136.5], [1526.0, 1131.0], [1530.0, 1158.0], [1506.0, 1220.0], [1512.0, 1127.0], [1514.0, 1168.0], [1524.0, 1182.3333333333333], [1486.0, 1177.0], [1484.0, 924.5], [1480.0, 1227.5], [1478.0, 1189.3333333333333], [1476.0, 1103.0], [1500.0, 1040.0], [1586.0, 1177.5], [1574.0, 1223.0], [1568.0, 653.0], [1576.0, 1100.0], [1578.0, 1214.0], [1582.0, 654.0], [1598.0, 1000.3333333333334], [1594.0, 1132.5], [1592.0, 1214.0], [1588.0, 1135.5], [1584.0, 1194.0], [1546.0, 1118.0], [1544.0, 1115.0], [1542.0, 1137.0], [1540.0, 1117.0], [1536.0, 1191.5], [1564.0, 1168.0], [1562.0, 1195.5], [1560.0, 1149.5], [1558.0, 1126.0], [1556.0, 1031.5], [1554.0, 1154.0], [1656.0, 1140.0], [1662.0, 5.0], [1638.0, 1167.0], [1642.0, 1091.0], [1644.0, 1225.0], [1658.0, 303.25], [1654.0, 1248.0], [1652.0, 1200.0], [1650.0, 1195.6666666666667], [1602.0, 1135.5], [1622.0, 606.0], [1620.0, 1137.0], [1616.0, 1052.5], [1646.0, 1133.0], [1726.0, 1141.0], [1696.0, 1220.5], [1698.0, 1153.0], [1704.0, 1141.0], [1706.0, 1120.5], [1724.0, 1061.6666666666667], [1720.0, 1124.0], [1716.0, 1200.0], [1714.0, 1162.5], [1674.0, 6.0], [1668.0, 370.0], [1664.0, 1119.0], [1688.0, 1216.6666666666667], [1682.0, 1208.3333333333333], [1680.0, 607.0], [1780.0, 1229.0], [1760.0, 611.0], [1762.0, 1209.0], [1784.0, 5.0], [1732.0, 1214.0], [1738.0, 1243.0], [1756.0, 10.0], [1752.0, 1059.0], [1746.0, 1191.0], [1770.0, 1140.0], [1850.0, 567.0], [1844.0, 588.0], [1854.0, 775.7000000000002], [1826.0, 560.5], [1824.0, 1057.3333333333333], [1834.0, 1083.0], [1830.0, 824.5], [1848.0, 1004.0], [1846.0, 7.5], [1840.0, 760.3333333333334], [1806.0, 1195.0], [1804.0, 1162.0], [1802.0, 1072.0], [1798.0, 949.0], [1794.0, 1131.0], [1792.0, 1212.0], [1818.0, 562.0], [1816.0, 10.0], [1814.0, 273.13793103448273], [1836.0, 689.8], [1838.0, 1113.0], [1842.0, 5.0], [1085.0, 1254.0], [1081.0, 1288.0], [1057.0, 1298.0], [1061.0, 768.0], [1059.0, 1148.0], [1063.0, 1298.0], [1079.0, 1029.25], [1075.0, 1221.0], [1039.0, 1294.0], [1029.0, 1176.0], [1027.0, 1053.3333333333333], [1055.0, 1338.0], [1049.0, 1251.25], [1047.0, 1369.0], [1147.0, 1332.0], [1121.0, 1342.0], [1123.0, 1017.0], [1127.0, 1191.25], [1135.0, 1352.0], [1149.0, 1358.75], [1139.0, 1346.5], [1137.0, 714.0], [1101.0, 1325.0], [1095.0, 1052.0], [1093.0, 1294.5], [1091.0, 1302.0], [1089.0, 1147.0], [1117.0, 1077.0], [1115.0, 1156.25], [1113.0, 1019.0], [1111.0, 1119.75], [1107.0, 1121.0], [1105.0, 1205.5], [1185.0, 527.5], [1215.0, 1141.0], [1187.0, 574.0], [1191.0, 603.0], [1195.0, 1131.0], [1193.0, 519.0], [1199.0, 651.5], [1213.0, 737.6666666666666], [1209.0, 945.6666666666667], [1203.0, 1246.0], [1201.0, 1300.0], [1167.0, 982.0], [1161.0, 940.5], [1159.0, 549.0], [1173.0, 523.0], [1171.0, 618.0], [1265.0, 1204.2], [1271.0, 1305.0], [1249.0, 705.0], [1255.0, 658.5], [1253.0, 1191.6], [1267.0, 666.0], [1219.0, 661.0], [1227.0, 674.5], [1221.0, 530.0], [1231.0, 313.5], [1245.0, 979.5], [1243.0, 630.0], [1241.0, 1296.0], [1233.0, 706.5], [1263.0, 661.0], [1337.0, 1283.0], [1343.0, 1184.0], [1317.0, 1043.0], [1319.0, 1020.0], [1323.0, 1213.0], [1333.0, 1217.0], [1331.0, 1186.0], [1329.0, 1227.0], [1289.0, 1285.5], [1285.0, 1304.0], [1283.0, 1037.0], [1311.0, 1216.0], [1305.0, 1256.6], [1301.0, 270.0], [1299.0, 1207.0], [1297.0, 1265.5], [1405.0, 1095.5], [1407.0, 979.0], [1379.0, 1283.0], [1377.0, 1136.25], [1383.0, 1115.0], [1387.0, 898.0], [1403.0, 1148.6666666666667], [1399.0, 983.25], [1393.0, 775.0], [1375.0, 1212.0], [1351.0, 906.5], [1353.0, 1287.5], [1357.0, 1206.5], [1371.0, 1313.0], [1367.0, 1170.0], [1365.0, 1279.0], [1389.0, 1182.5], [1467.0, 1194.5], [1465.0, 1236.0], [1441.0, 1152.0], [1455.0, 989.5], [1453.0, 1025.0], [1469.0, 1183.0], [1461.0, 1102.5], [1459.0, 1154.0], [1409.0, 1271.0], [1415.0, 619.0], [1417.0, 1243.0], [1419.0, 1197.3333333333333], [1437.0, 726.0], [1435.0, 6.0], [1431.0, 1112.0], [1429.0, 1113.0], [1425.0, 1078.3333333333333], [1529.0, 1120.5], [1535.0, 669.0], [1505.0, 1180.0], [1511.0, 597.25], [1507.0, 1131.0], [1513.0, 1137.0], [1519.0, 1221.8], [1533.0, 1133.0], [1531.0, 1176.0], [1527.0, 1124.0], [1523.0, 1176.0], [1487.0, 1240.0], [1485.0, 1273.0], [1481.0, 1232.0], [1501.0, 1150.5], [1499.0, 1062.0], [1497.0, 1136.5], [1495.0, 1082.5], [1493.0, 1020.5], [1491.0, 1117.0], [1489.0, 1139.6666666666667], [1571.0, 1041.5], [1593.0, 1111.0], [1599.0, 1189.5], [1569.0, 1118.0], [1573.0, 1263.0], [1577.0, 1114.0], [1581.0, 1231.0], [1579.0, 1212.0], [1583.0, 1140.0], [1587.0, 1096.0], [1551.0, 1032.6666666666667], [1549.0, 1013.3333333333334], [1543.0, 1121.0], [1539.0, 1132.5], [1537.0, 1122.0], [1567.0, 1162.3333333333333], [1559.0, 1227.0], [1659.0, 602.5], [1637.0, 1039.5], [1635.0, 975.0], [1639.0, 1103.8], [1641.0, 606.5], [1645.0, 1121.0], [1651.0, 601.5], [1629.0, 1142.0], [1603.0, 1213.0], [1607.0, 1112.0], [1605.0, 1124.0], [1611.0, 1161.0], [1609.0, 1061.0], [1615.0, 1133.0], [1613.0, 1054.5], [1625.0, 1121.6666666666667], [1619.0, 1125.0], [1647.0, 1140.5], [1727.0, 1133.0], [1721.0, 1141.0], [1697.0, 1162.5], [1701.0, 1191.0], [1705.0, 1112.0], [1711.0, 1110.0], [1719.0, 1199.0], [1715.0, 1138.0], [1677.0, 1117.0], [1675.0, 1204.0], [1673.0, 5.0], [1671.0, 5.0], [1665.0, 1225.0], [1693.0, 917.0], [1681.0, 1117.0], [1781.0, 4.0], [1777.0, 1228.0], [1789.0, 1057.0], [1791.0, 1003.6666666666666], [1765.0, 1119.0], [1783.0, 1119.0], [1757.0, 1212.0], [1729.0, 1139.0], [1737.0, 895.0], [1743.0, 1171.0], [1755.0, 1099.0], [1753.0, 1138.0], [1747.0, 1136.0], [1775.0, 1129.0], [1773.0, 1139.0], [1769.0, 964.0], [1793.0, 13.0], [1847.0, 5.2], [1801.0, 1195.0], [1797.0, 1123.0], [1821.0, 1067.0], [1819.0, 1031.5], [1815.0, 463.38888888888886], [1813.0, 712.875], [1811.0, 1130.3333333333333], [1809.0, 1172.0], [1835.0, 1015.0], [1837.0, 1106.0], [1843.0, 459.0], [1841.0, 481.0], [1.0, 2.416666666666667]], "isOverall": false, "label": "User Controller", "isController": false}, {"data": [[185.92759999999996, 197.16280000000097]], "isOverall": false, "label": "User Controller-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1854.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 80000.0, "minX": 1.616115E12, "maxY": 112629.8, "series": [{"data": [[1.616115E12, 112629.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.616115E12, 80000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616115E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 137.66310000000058, "minX": 1.616115E12, "maxY": 197.16280000000097, "series": [{"data": [[1.616115E12, 137.66310000000058]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[1.616115E12, 197.16280000000097]], "isOverall": false, "label": "User Controller", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616115E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.616115E12, "maxY": 117.34599999999982, "series": [{"data": [[1.616115E12, 117.34599999999982]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[1.616115E12, 0.0]], "isOverall": false, "label": "User Controller", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616115E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.616115E12, "maxY": 6.531099999999989, "series": [{"data": [[1.616115E12, 6.531099999999989]], "isOverall": false, "label": "Create User (signup)", "isController": false}, {"data": [[1.616115E12, 0.0]], "isOverall": false, "label": "User Controller", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616115E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.616115E12, "maxY": 1571.0, "series": [{"data": [[1.616115E12, 1571.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.616115E12, 909.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.616115E12, 1457.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.616115E12, 1175.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.616115E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.616115E12, 2.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616115E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1198.0, "maxY": 949.5, "series": [{"data": [[2248.0, 1.0], [1198.0, 912.0], [2350.0, 2.0], [2680.0, 2.0], [2726.0, 949.5], [2748.0, 2.0], [2892.0, 2.0], [3158.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3158.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1198.0, "maxY": 218.0, "series": [{"data": [[2248.0, 0.0], [1198.0, 218.0], [2350.0, 0.0], [2680.0, 0.0], [2726.0, 0.5], [2748.0, 0.0], [2892.0, 0.0], [3158.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3158.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 333.3333333333333, "minX": 1.616115E12, "maxY": 333.3333333333333, "series": [{"data": [[1.616115E12, 333.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616115E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 333.3333333333333, "minX": 1.616115E12, "maxY": 333.3333333333333, "series": [{"data": [[1.616115E12, 333.3333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616115E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.616115E12, "maxY": 166.66666666666666, "series": [{"data": [[1.616115E12, 166.66666666666666]], "isOverall": false, "label": "Create User (signup)-success", "isController": false}, {"data": [[1.616115E12, 166.66666666666666]], "isOverall": false, "label": "User Controller-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616115E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 333.3333333333333, "minX": 1.616115E12, "maxY": 333.3333333333333, "series": [{"data": [[1.616115E12, 333.3333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616115E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

